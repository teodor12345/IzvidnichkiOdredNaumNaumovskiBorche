# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getBlogPostDocument(relativePath: String): BlogPostDocument!
  getBlogPostList(before: String, after: String, first: Float, last: Float): BlogPostConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Float, last: Float): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = BlogPostDocument | PagesDocument

type BlogPostSeoMeta {
  name: String
  content: String
}

type BlogPostSeo {
  title: String
  description: String
  meta: [BlogPostSeoMeta]
}

type BlogPost {
  slug: String
  locale: String
  seo: BlogPostSeo
  mainTitle: String
  category: String
  heroImage: String
  date: String
  title: String
  paragraph: JSON
  hasButton: Boolean
  button: String
  link: String
}

type BlogPostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: BlogPost!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type BlogPostConnectionEdges {
  cursor: String
  node: BlogPostDocument
}

type BlogPostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [BlogPostConnectionEdges]
}

type PagesSeoMeta {
  name: String
  content: String
}

type PagesSeo {
  title: String
  description: String
  meta: [PagesSeoMeta]
}

type PagesPageBlocksSpacing {
  size: String
}

type PagesPageBlocksTitleDescription {
  mainTitle: JSON
  mainDescription: JSON
}

type PagesPageBlocksHomepageHero {
  title: String
  description: JSON
  heroImage: String
}

type PagesPageBlocksAdventure {
  adventureTitle: JSON
  adventureDescription: JSON
  adventureImage: String
  adventureImageAlt: String
}

type PagesPageBlocksTwoImagesImageList {
  heroImage: String
  buttonTitle: String
  mainTitle: String
  buttonLink: String
}

type PagesPageBlocksTwoImages {
  imageList: [PagesPageBlocksTwoImagesImageList]
}

type PagesPageBlocksImageImageList {
  heroImage: String
  buttonTitle: String
  buttonLink: String
  mobileImage: String
}

type PagesPageBlocksImage {
  mainTitle: JSON
  imageList: [PagesPageBlocksImageImageList]
}

type PagesPageBlocksImageTwoImageList {
  heroImage: String
  buttonTitle: String
  mainTitle: String
  buttonLink: String
}

type PagesPageBlocksImageTwo {
  imageList: [PagesPageBlocksImageTwoImageList]
}

type PagesPageBlocksContentVideo {
  cvideoPlayer: String
}

type PagesPageBlocksLeftImageRightLinksListOfMerchandise {
  description: JSON
  icon: String
  iconAlt: String
  link: String
}

type PagesPageBlocksLeftImageRightLinks {
  bgImage: String
  bgImageAlt: String
  flip: Boolean
  listOfMerchandise: [PagesPageBlocksLeftImageRightLinksListOfMerchandise]
}

union PagesPageBlocks = PagesPageBlocksSpacing | PagesPageBlocksTitleDescription | PagesPageBlocksHomepageHero | PagesPageBlocksAdventure | PagesPageBlocksTwoImages | PagesPageBlocksImage | PagesPageBlocksImageTwo | PagesPageBlocksContentVideo | PagesPageBlocksLeftImageRightLinks

type Pages {
  slug: String
  locale: String
  seo: PagesSeo
  pageBlocks: [PagesPageBlocks]
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateBlogPostDocument(relativePath: String!, params: BlogPostMutation!): BlogPostDocument!
  createBlogPostDocument(relativePath: String!, params: BlogPostMutation!): BlogPostDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
  createPagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  blogPost: BlogPostMutation
  pages: PagesMutation
}

input BlogPostSeoMetaMutation {
  name: String
  content: String
}

input BlogPostSeoMutation {
  title: String
  description: String
  meta: [BlogPostSeoMetaMutation]
}

input BlogPostMutation {
  slug: String
  locale: String
  seo: BlogPostSeoMutation
  mainTitle: String
  category: String
  heroImage: String
  date: String
  title: String
  paragraph: JSON
  hasButton: Boolean
  button: String
  link: String
}

input PagesSeoMetaMutation {
  name: String
  content: String
}

input PagesSeoMutation {
  title: String
  description: String
  meta: [PagesSeoMetaMutation]
}

input PagesPageBlocksSpacingMutation {
  size: String
}

input PagesPageBlocksTitleDescriptionMutation {
  mainTitle: JSON
  mainDescription: JSON
}

input PagesPageBlocksHomepageHeroMutation {
  title: String
  description: JSON
  heroImage: String
}

input PagesPageBlocksAdventureMutation {
  adventureTitle: JSON
  adventureDescription: JSON
  adventureImage: String
  adventureImageAlt: String
}

input PagesPageBlocksTwoImagesImageListMutation {
  heroImage: String
  buttonTitle: String
  mainTitle: String
  buttonLink: String
}

input PagesPageBlocksTwoImagesMutation {
  imageList: [PagesPageBlocksTwoImagesImageListMutation]
}

input PagesPageBlocksImageImageListMutation {
  heroImage: String
  buttonTitle: String
  buttonLink: String
  mobileImage: String
}

input PagesPageBlocksImageMutation {
  mainTitle: JSON
  imageList: [PagesPageBlocksImageImageListMutation]
}

input PagesPageBlocksImageTwoImageListMutation {
  heroImage: String
  buttonTitle: String
  mainTitle: String
  buttonLink: String
}

input PagesPageBlocksImageTwoMutation {
  imageList: [PagesPageBlocksImageTwoImageListMutation]
}

input PagesPageBlocksContentVideoMutation {
  cvideoPlayer: String
}

input PagesPageBlocksLeftImageRightLinksListOfMerchandiseMutation {
  description: JSON
  icon: String
  iconAlt: String
  link: String
}

input PagesPageBlocksLeftImageRightLinksMutation {
  bgImage: String
  bgImageAlt: String
  flip: Boolean
  listOfMerchandise: [PagesPageBlocksLeftImageRightLinksListOfMerchandiseMutation]
}

input PagesPageBlocksMutation {
  spacing: PagesPageBlocksSpacingMutation
  titleDescription: PagesPageBlocksTitleDescriptionMutation
  homepageHero: PagesPageBlocksHomepageHeroMutation
  adventure: PagesPageBlocksAdventureMutation
  twoImages: PagesPageBlocksTwoImagesMutation
  image: PagesPageBlocksImageMutation
  imageTwo: PagesPageBlocksImageTwoMutation
  contentVideo: PagesPageBlocksContentVideoMutation
  leftImageRightLinks: PagesPageBlocksLeftImageRightLinksMutation
}

input PagesMutation {
  slug: String
  locale: String
  seo: PagesSeoMutation
  pageBlocks: [PagesPageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  